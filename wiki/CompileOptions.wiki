#summary compile options / define statements

= Introduction =

The code of openxvario can be customized to suit your projects needs.


= Details =

== Pin Assignments == 
some of the pin assignments can be changed here. Not all pins are possible for each function, under normal circumstances do not change these.
{{{
#define PIN_SerialTX 10       // the pin to transmit the serial data to the frsky telemetry enabled receiver
#define PIN_ClimbLed 13       // the led used to indicate lift for debugging purposes

// Define a voltagepin if you want to transmit the value to open9x:
//#define PIN_VoltageCell1 0    //  Pin for measuring Voltage of cell 1 ( Analog In Pin! )
//#define PIN_VoltageCell2 1    //  Pin for measuring Voltage of cell 2 ( Analog In Pin! )
//#define PIN_VoltageCell3 2    //  Pin for measuring Voltage of cell 3 ( Analog In Pin! )
//#define PIN_VoltageCell4 3    //  Pin for measuring Voltage of cell 4 ( Analog In Pin! )
//#define PIN_VoltageCell5 6    //  Pin for measuring Voltage of cell 5 ( Analog In Pin! )
//#define PIN_VoltageCell6 7    //  Pin for measuring Voltage of cell 6 ( Analog In Pin! )
}}}
== Arduino LED Mode ==
the onboard LED of the Arduino can be used in one of two ways. only one of the 2 options can be defined
{{{
// Choose how what the led will be used for (only 1 should be defined):
#define LED_BufferBlink       // Blink every time the averaging buffer complets one cycle
//#define LED_ClimbBlink        // Blink when climbRate > 0.15cm
}}}
== Absolute or relative Altitude display ==
i personally prefer to start with the abolute altitude being displayed in open9x. But open9x allways takes the first received altitude and uses it as an offset. this results in the starting altitude to be displayed as 0 meters.
If you define FORCE_ABSOLUTE_ALT, openxvario will overwrite that offset after starting (or reset). This activates the display of the absoplute calculated height in open9x. before you start your plane you can still press [MENU] on the telemetry dipslay screens to use the current altitude as an offset again.
{{{
// #define FORCE_ABSOLUTE_ALT // If defined, the height offset in open9x will be resetted upon startup, which results in an absolute height diplay.
                           // If not defined, open9x will use the first transmitted altitude as an internal offset, which results in an initial height of "0m"
}}}
== MS5611 Sensor I2C address ==
the normal I2C addresses are 0x76 or 0x77 depending on the used modul.
{{{
const int I2CAdd=0x77;                 // The I2C Address of the MS5611 breakout board ( normally 0x76 or 0x77 configured on the MS5611 module via a solder pin or fixed ...)
const int AverageValueCount=15;        // the number of values that will be used to calculate a new verage value
}}}
== Analog ClimbRate Mode == 
see AnalogClimbRate for details
{{{
//#define ANALOG_CLIMB_RATE   // If defined, the clib rate will be written as PWM Signal to the defined port( Only use if you have to use a receiver missing the serial connection)
#define OutputClimbRateMin = -3; 
#define OutputClimbRateMax = 3;
#define PIN_AnalogClimbRate 9 // the pin used to write the data to the frsky a1 or a2 pin (could be 3,5,6,9,10,11)
}}}
== absolute Altitude / air pressure in additional Fields == 
we can (ab)use some of the other telemetry fields to display some more data in the telemetry fields...
{{{
// for test purposes we can send the absolute height additionally as RPM ( RMPM 23430 = 234,30m)
//#define SEND_AltAsRPM // Altitude in RPM ;-) (resolution 30cm)

// for test purposes we can send the absolute height to the DIST field resolution: 0-327.68m=1cm/>327,68..3276,8m=10cm/>3276,8=1m)
// #define SEND_AltAsDIST // Altitude in DIST
// #define SEND_PressureAsDist // Pressure as DIST
}}}